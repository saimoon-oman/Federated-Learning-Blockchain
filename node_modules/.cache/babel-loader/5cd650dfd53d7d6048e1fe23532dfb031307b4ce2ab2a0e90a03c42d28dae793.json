{"ast":null,"code":"var _jsxFileName = \"D:\\\\Study\\\\Thesis 4200\\\\implementation\\\\FedBlockchain\\\\src\\\\components\\\\Glass.js\",\n  _s = $RefreshSig$();\nimport './Glass.css';\nimport { useState } from 'react';\nimport axios from 'axios';\nimport parse from \"html-react-parser\";\nimport { abi_fedLearning, contractAddress_fedLearning, abi_flockie, contractAddress_flockie, FLK_wolf, FLK_elephant, FLK_tiger } from './sc_config';\nimport Web3 from 'web3';\nimport UploadPage from './UploadPage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Glass() {\n  _s();\n  const [x, setx] = useState('');\n  // const [first, setfirst] = useState('')\n  const [train, setTrain] = useState(false);\n  const [approve, setApprove] = useState(false);\n  const [server, setServer] = useState(false);\n  const [update, setUpdate] = useState(false);\n  const web3 = new Web3(\"http://localhost:7545\");\n  const fedLearning = new web3.eth.Contract(abi_fedLearning, contractAddress_fedLearning);\n  const flockie = new web3.eth.Contract(abi_flockie, contractAddress_flockie);\n  const handleSubmit = async e => {\n    e.preventDefault(); // Prevents the default form submission behavior to handle data via code.\n    const params = {\n      x\n    }; // Creates an object with no. of client which is x\n    const data = await axios.post('http://localhost:8080/train', params); // Sends a POST request to 'http://localhost:8080/train' endpoint with the 'params' object.   Receives the response data returned from the server.\n    var accounts = []; // Initializes an empty array 'accounts' to store Ethereum accounts.\n    const account_addr = await web3.eth.getAccounts(); // Retrieves Ethereum accounts available through Web3.\n    console.log(\"All Ethemereum Accounts: \");\n    console.log(account_addr); // Logs the array of Ethereum accounts to the console.\n    for (var element in account_addr) {\n      // Loops through the 'account_addr' array and adds each account to the 'accounts' array.\n      accounts.push(account_addr[element]);\n    }\n    console.log(\"Accounts List: \", accounts[1]); // Logs the second account from the 'accounts' array to the console.\n    fedLearning.methods.sendWeights(accounts[1], data.data.data.client0).send({\n      from: accounts[0],\n      gas: 3000000\n    }); // Calls the 'sendWeights' method of the 'fedLearning' contract to send client0's data to the second Ethereum account.  // The 'from' parameter specifies the sender's account and 'gas' is the gas limit for the transaction.\n    fedLearning.methods.sendWeights(accounts[2], data.data.data.client1).send({\n      from: accounts[0],\n      gas: 3000000\n    }); // Similarly, sends client1's data to the third Ethereum account.\n    fedLearning.methods.sendWeights(accounts[3], data.data.data.client2).send({\n      from: accounts[0],\n      gas: 3000000\n    }); // Sends client2's data to the fourth Ethereum account.\n    setTrain(true); // Updates the state variable 'train' to true, indicating that the training process is completed.\n  };\n\n  const handleAggregate = async e => {\n    e.preventDefault(); // Prevents the default form submission behavior to handle data via code.\n\n    const accounts = [];\n    const account_addr = await web3.eth.getAccounts();\n    for (const element in account_addr) {\n      accounts.push(account_addr[element]);\n    } // Retrieves Ethereum accounts using Web3 and stores them in the 'accounts' array.\n\n    console.log(\"here\");\n    const payload = []; // Initializes an empty array 'payload' to store data.\n    await fedLearning.methods.getWeights(accounts[1]).call().then(data => {\n      payload.push(data);\n    }); // Retrieves weights for account 1 from the 'fedLearning' contract and adds it to the 'payload' array.\n    // console.log(\"aggregation1\")\n    console.log(\"Get data from address \", accounts[1]);\n    console.log(\"data: \", payload[0]);\n    await fedLearning.methods.getWeights(accounts[2]).call().then(data => {\n      payload.push(data);\n    }); // Similarly, fetches weights for accounts 2 and 3 and adds them to the 'payload' array.\n    console.log(\"Get data from address \", accounts[2]);\n    console.log(\"data: \", payload[1]);\n    await fedLearning.methods.getWeights(accounts[3]).call().then(data => {\n      payload.push(data);\n    });\n    console.log(\"Get data from address \", accounts[3]);\n    console.log(\"data: \", payload[2]);\n\n    //Mint NFT\n    await flockie.methods.mintNFT(accounts[4], FLK_wolf).send({\n      from: accounts[0],\n      gas: 3000000\n    });\n    await flockie.methods.mintNFT(accounts[5], FLK_elephant).send({\n      from: accounts[0],\n      gas: 3000000\n    });\n    await flockie.methods.mintNFT(accounts[6], FLK_tiger).send({\n      from: accounts[0],\n      gas: 3000000\n    });\n    const data_agg = await axios.post('http://localhost:8080/aggregate', payload);\n    setServer(true);\n    await flockie.methods.vote(accounts[4], data_agg.data.data.accuracy[0]).send({\n      from: accounts[0],\n      gas: 3000000\n    });\n    await flockie.methods.vote(accounts[5], data_agg.data.data.accuracy[1]).send({\n      from: accounts[0],\n      gas: 3000000\n    });\n    await flockie.methods.vote(accounts[6], data_agg.data.data.accuracy[2]).send({\n      from: accounts[0],\n      gas: 3000000\n    });\n    const upd = await flockie.methods.getVoteUpdate().call();\n    if (upd) {\n      await fedLearning.methods.setServer(data_agg.data.data.hash).call().then(data => {\n        setUpdate(true);\n        setApprove(data);\n      });\n    }\n  };\n\n  // const reset = () => {\n  //   setx('')\n  //   setfirst('')\n  // }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [!train && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"glass\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: e => handleSubmit(e),\n        className: \"glass__form\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Train Clients\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"glass__form__group\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"Client_count\",\n            className: \"glass__form__input\",\n            placeholder: \"Number of Clients\",\n            required: true,\n            autoFocus: true,\n            min: \"2\"\n            // max=\"1\"\n            ,\n            pattern: \"[0-9]{0,1}\",\n            title: \"Client count\",\n            type: \"number\",\n            value: x,\n            onChange: e => setx(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"glass__form__group\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"glass__form__btn\",\n            children: \"Train Clients and Upload Gradients\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }, this), train && !server && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"glass\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: e => handleAggregate(e),\n        className: \"glass__form\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Aggregate Clients\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"glass__form__group\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"glass__form__btn\",\n            children: \"Approve\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 5\n    }, this), train && server && approve && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"glass\",\n      children: /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Congratulations, your model has been approved!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), train && server && !approve && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"glass\",\n      children: /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Please improve your model and try again!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n_s(Glass, \"jQO3vjbWLTpGevty939gxbfMSJU=\");\n_c = Glass;\nexport default Glass;\nvar _c;\n$RefreshReg$(_c, \"Glass\");","map":{"version":3,"names":["useState","axios","parse","abi_fedLearning","contractAddress_fedLearning","abi_flockie","contractAddress_flockie","FLK_wolf","FLK_elephant","FLK_tiger","Web3","UploadPage","Glass","x","setx","train","setTrain","approve","setApprove","server","setServer","update","setUpdate","web3","fedLearning","eth","Contract","flockie","handleSubmit","e","preventDefault","params","data","post","accounts","account_addr","getAccounts","console","log","element","push","methods","sendWeights","client0","send","from","gas","client1","client2","handleAggregate","payload","getWeights","call","then","mintNFT","data_agg","vote","accuracy","upd","getVoteUpdate","hash","target","value"],"sources":["D:/Study/Thesis 4200/implementation/FedBlockchain/src/components/Glass.js"],"sourcesContent":["import './Glass.css'\r\nimport { useState } from 'react'\r\nimport axios from 'axios'\r\nimport parse from \"html-react-parser\";\r\nimport {abi_fedLearning,contractAddress_fedLearning, abi_flockie, contractAddress_flockie, FLK_wolf, FLK_elephant, FLK_tiger} from './sc_config'\r\nimport Web3 from 'web3'\r\nimport UploadPage from './UploadPage'\r\n\r\nfunction Glass() {\r\n  const [x, setx] = useState('')\r\n  // const [first, setfirst] = useState('')\r\n  const [train, setTrain] = useState(false)\r\n  const [approve, setApprove] = useState(false)\r\n  const [server, setServer] = useState(false)\r\n  const [update, setUpdate] = useState(false)\r\n  \r\n  const web3 = new Web3(\"http://localhost:7545\")\r\n  const fedLearning = new web3.eth.Contract(abi_fedLearning,contractAddress_fedLearning)\r\n  const flockie = new web3.eth.Contract(abi_flockie, contractAddress_flockie) \r\n\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault()      // Prevents the default form submission behavior to handle data via code.\r\n    const params = { x }    // Creates an object with no. of client which is x\r\n    const data = await axios.post('http://localhost:8080/train', params)    // Sends a POST request to 'http://localhost:8080/train' endpoint with the 'params' object.   Receives the response data returned from the server.\r\n    var accounts = []         // Initializes an empty array 'accounts' to store Ethereum accounts.\r\n    const account_addr = await web3.eth.getAccounts()           // Retrieves Ethereum accounts available through Web3.\r\n    console.log(\"All Ethemereum Accounts: \")\r\n    console.log(account_addr)             // Logs the array of Ethereum accounts to the console.\r\n    for(var element in account_addr){       // Loops through the 'account_addr' array and adds each account to the 'accounts' array.\r\n      accounts.push(account_addr[element])\r\n    }\r\n    console.log(\"Accounts List: \",accounts[1])      // Logs the second account from the 'accounts' array to the console.\r\n    fedLearning.methods.sendWeights(accounts[1], data.data.data.client0).send({from:accounts[0], gas: 3000000}); // Calls the 'sendWeights' method of the 'fedLearning' contract to send client0's data to the second Ethereum account.  // The 'from' parameter specifies the sender's account and 'gas' is the gas limit for the transaction.\r\n    fedLearning.methods.sendWeights(accounts[2], data.data.data.client1).send({from:accounts[0], gas: 3000000}); // Similarly, sends client1's data to the third Ethereum account.\r\n    fedLearning.methods.sendWeights(accounts[3], data.data.data.client2).send({from:accounts[0], gas: 3000000}); // Sends client2's data to the fourth Ethereum account.\r\n    setTrain(true)   // Updates the state variable 'train' to true, indicating that the training process is completed.\r\n  }\r\n\r\n  const handleAggregate = async(e) => {\r\n    e.preventDefault()      // Prevents the default form submission behavior to handle data via code.\r\n\r\n    const accounts = []\r\n    const account_addr = await web3.eth.getAccounts()\r\n    for(const element in account_addr){\r\n      accounts.push(account_addr[element])\r\n    }   // Retrieves Ethereum accounts using Web3 and stores them in the 'accounts' array.\r\n\r\n    console.log(\"here\")\r\n\r\n    const payload = []   // Initializes an empty array 'payload' to store data.\r\n    await fedLearning.methods.getWeights(accounts[1]).call().then((data)=>{\r\n      payload.push(data)\r\n    });   // Retrieves weights for account 1 from the 'fedLearning' contract and adds it to the 'payload' array.\r\n    // console.log(\"aggregation1\")\r\n    console.log(\"Get data from address \", accounts[1])\r\n    console.log(\"data: \", payload[0])\r\n    await fedLearning.methods.getWeights(accounts[2]).call().then((data) => {\r\n      payload.push(data)\r\n    });     // Similarly, fetches weights for accounts 2 and 3 and adds them to the 'payload' array.\r\n    console.log(\"Get data from address \", accounts[2])\r\n    console.log(\"data: \", payload[1])\r\n    await fedLearning.methods.getWeights(accounts[3]).call().then((data) => {\r\n      payload.push(data)\r\n    });\r\n    console.log(\"Get data from address \", accounts[3])\r\n    console.log(\"data: \", payload[2])\r\n    \r\n    //Mint NFT\r\n    await flockie.methods.mintNFT(accounts[4], FLK_wolf).send({from:accounts[0], gas: 3000000});\r\n    await flockie.methods.mintNFT(accounts[5], FLK_elephant).send({from:accounts[0], gas: 3000000});\r\n    await flockie.methods.mintNFT(accounts[6], FLK_tiger).send({from:accounts[0], gas: 3000000});\r\n\r\n    const data_agg = await axios.post('http://localhost:8080/aggregate', payload)\r\n    setServer(true)\r\n    await flockie.methods.vote(accounts[4], data_agg.data.data.accuracy[0]).send({from:accounts[0], gas: 3000000});\r\n    await flockie.methods.vote(accounts[5], data_agg.data.data.accuracy[1]).send({from:accounts[0], gas: 3000000});\r\n    await flockie.methods.vote(accounts[6], data_agg.data.data.accuracy[2]).send({from:accounts[0], gas: 3000000});\r\n\r\n    const upd = await flockie.methods.getVoteUpdate().call()\r\n\r\n    if(upd){\r\n      await fedLearning.methods.setServer(data_agg.data.data.hash).call().then((data) => {\r\n        setUpdate(true)\r\n        setApprove(data)\r\n      })\r\n    }\r\n  }\r\n\r\n  // const reset = () => {\r\n  //   setx('')\r\n  //   setfirst('')\r\n  // }\r\n\r\n \r\n  return (\r\n    <>\r\n    {!train &&\r\n    <div className=\"glass\">\r\n      <form onSubmit={(e) => handleSubmit(e)} className=\"glass__form\">\r\n        <h4>Train Clients</h4>\r\n        <div className=\"glass__form__group\">\r\n          <input\r\n            id=\"Client_count\"\r\n            className=\"glass__form__input\"\r\n            placeholder=\"Number of Clients\"\r\n            required\r\n            autoFocus\r\n            min=\"2\"\r\n            // max=\"1\"\r\n            pattern=\"[0-9]{0,1}\"\r\n            title=\"Client count\"\r\n            type=\"number\"\r\n            value={x}\r\n            onChange={(e) => setx(e.target.value)}\r\n          />\r\n        </div>\r\n\r\n        {/* <div className=\"glass__form__group\">\r\n          <input\r\n            id=\"bsc\"\r\n            className=\"glass__form__input\"\r\n            placeholder=\"True or False\"\r\n            required\r\n            // min=\"0\"\r\n            // max=\"5\"\r\n            type=\"bool\"\r\n            title=\"First time?\"\r\n            // pattern=\"[0-9]+([\\.,][0-9]+)?\"\r\n            // step=\"0.01\"\r\n            value={first}\r\n            onChange={(e) => setfirst(e.target.value)}\r\n          />\r\n        </div> */}\r\n\r\n        <div className=\"glass__form__group\">\r\n          <button type=\"submit\" className=\"glass__form__btn\">\r\n            Train Clients and Upload Gradients\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>}\r\n\r\n    {train && !server &&\r\n    <div className=\"glass\">\r\n      <form onSubmit={(e) => handleAggregate(e)} className=\"glass__form\">\r\n        <h4>Aggregate Clients</h4>\r\n        <div className=\"glass__form__group\">\r\n          <button type=\"submit\" className=\"glass__form__btn\">\r\n            Approve\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>}\r\n    \r\n    {train && server && approve &&\r\n      <div className=\"glass\">\r\n          <h4>Congratulations, your model has been approved!</h4>\r\n      </div>}\r\n\r\n    \r\n\r\n    {train && server && !approve &&\r\n    <div className=\"glass\">\r\n        <h4>Please improve your model and try again!</h4>\r\n    </div>}\r\n\r\n    </>)\r\n}\r\n\r\nexport default Glass"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}