{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\saimo\\\\OneDrive\\\\Desktop\\\\Fed-Block-Final\\\\src\\\\components\\\\Glass.js\",\n  _s = $RefreshSig$();\nimport './Glass.css';\nimport { useState } from 'react';\nimport axios from 'axios';\nimport parse from \"html-react-parser\";\nimport { abi_fedLearning, contractAddress_fedLearning, abi_flockie, contractAddress_flockie, FLK_wolf, FLK_elephant, FLK_tiger } from './sc_config';\nimport Web3 from 'web3';\nimport UploadPage from './UploadPage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Glass() {\n  _s();\n  const [x, setx] = useState(9);\n  const [committee, setcommittee] = useState(3);\n  const [threshold, setthreshold] = useState(10);\n  const [train, setTrain] = useState(false);\n  const [approve, setApprove] = useState(false);\n  const [server, setServer] = useState(false);\n  const [update, setUpdate] = useState(false);\n  const web3 = new Web3(\"http://localhost:7545\");\n  const fedLearning = new web3.eth.Contract(abi_fedLearning, contractAddress_fedLearning);\n  //const flockie = new web3.eth.Contract(abi_flockie, contractAddress_flockie)\n\n  const handleSubmit = async e => {\n    e.preventDefault(); // Prevents the default form submission behavior to handle data via code.\n    var accounts = []; // Initializes an empty array 'accounts' to store Ethereum accounts.\n    const account_addr = await web3.eth.getAccounts(); // Retrieves Ethereum accounts available through Web3.\n    // console.log(\"All Ethemereum Accounts: \")\n    // console.log(account_addr)             // Logs the array of Ethereum accounts to the console.\n    for (var element in account_addr) {\n      // Loops through the 'account_addr' array and adds each account to the 'accounts' array.\n      accounts.push(account_addr[element]);\n    }\n    const user_input_value = {\n      \"client\": x,\n      \"committee\": committee,\n      \"threshold\": threshold\n    };\n    const initial_score_and_serverhash = await axios.post('http://localhost:8080/initialize', user_input_value);\n    console.log(initial_score_and_serverhash.data.server_hash);\n    console.log(initial_score_and_serverhash.data.trust_score);\n    await fedLearning.methods.setServer(initial_score_and_serverhash.data.server_hash).send({\n      from: accounts[0],\n      gas: 3000000\n    });\n    for (let i = 1; i <= x; i++) {\n      fedLearning.methods.setScore(accounts[i], initial_score_and_serverhash.data.trust_score[i - 1]).send({\n        from: accounts[i],\n        gass: 3000000\n      });\n    }\n    let s_hash;\n    await fedLearning.methods.getServer().call().then(server => {\n      s_hash = server;\n    });\n    const trust_score = [];\n    for (let i = 1; i <= x; i++) {\n      await fedLearning.methods.getScore(accounts[i]).call().then(score => {\n        trust_score.push(score);\n      });\n    }\n    const params = {\n      \"hash\": s_hash,\n      \"trust_score\": trust_score\n    };\n    const trust_score_and_serverhash = await axios.post('http://localhost:8080/trust_model', user_input_value, params);\n\n    // const params = { x }    // Creates an object with no. of client which is x\n    // const params = {\n    //   \"s_hash\": s_hash,\n    //   \"x\": x\n    // }    // Creates an object with no. of client which is x and s_hash\n\n    // const data = await axios.post('http://localhost:8080/train', params)    // Sends a POST request to 'http://localhost:8080/train' endpoint with the 'params' object.   Receives the response data returned from the server.\n\n    // console.log(\"Accounts List: \", accounts[1])      // Logs the second account from the 'accounts' array to the console.\n    // for (let i = 1; i <= x; i++) {\n    //   fedLearning.methods.sendWeights(accounts[i], data.data.data[`client${i - 1}`]).send({ from: accounts[i], gas: 3000000 }); // Calls the 'sendWeights' method of the 'fedLearning' contract to send client0's data to the second Ethereum account.  // The 'from' parameter specifies the sender's account and 'gas' is the gas limit for the transaction.\n    // }\n    // // fedLearning.methods.sendWeights(accounts[1], data.data.data.client0).send({from:accounts[0], gas: 3000000}); // Calls the 'sendWeights' method of the 'fedLearning' contract to send client0's data to the second Ethereum account.  // The 'from' parameter specifies the sender's account and 'gas' is the gas limit for the transaction.\n    // // fedLearning.methods.sendWeights(accounts[2], data.data.data.client1).send({from:accounts[0], gas: 3000000}); // Similarly, sends client1's data to the third Ethereum account.\n    // // fedLearning.methods.sendWeights(accounts[3], data.data.data.client2).send({from:accounts[0], gas: 3000000}); // Sends client2's data to the fourth Ethereum account.\n    setTrain(true); // Updates the state variable 'train' to true, indicating that the training process is completed.\n  };\n\n  const handleAggregate = async e => {\n    e.preventDefault(); // Prevents the default form submission behavior to handle data via code.\n\n    const accounts = [];\n    const account_addr = await web3.eth.getAccounts();\n    for (const element in account_addr) {\n      accounts.push(account_addr[element]);\n    } // Retrieves Ethereum accounts using Web3 and stores them in the 'accounts' array.\n\n    const payload = []; // Initializes an empty array 'payload' to store data.\n\n    for (let i = 1; i <= x; i++) {\n      await fedLearning.methods.getWeights(accounts[i]).call().then(data => {\n        // console.log(data)\n        payload.push(data);\n      }); // Retrieves weights for account 1 from the 'fedLearning' contract and adds it to the 'payload' array.  \n      console.log(\"Get data from address \", accounts[i]);\n      console.log(\"data: \", payload[i - 1]);\n    }\n    console.log(\"payload[] : \", payload);\n    const data_agg = await axios.post('http://localhost:8080/aggregate', payload); // Posts the 'payload' data to 'http://localhost:8080/aggregate' and gets the aggregated data.\n\n    setServer(true); // Sets the 'server' state to true, indicating the server has received aggregated data\n    console.log(\"HELLLLOOOOOOO\");\n    console.log(\"Accuracy: \", data_agg.data.data.accuracy);\n    console.log(\"Hash: \", data_agg.data.data.hash);\n    // Votes on the accuracy of the aggregated data for the respective accounts using the 'flockie' contract\n\n    for (let i = 1; i <= x; i++) {\n      await fedLearning.methods.vote(accounts[i], data_agg.data.data.accuracy[i - 1]).send({\n        from: accounts[i],\n        gas: 3000000\n      });\n    }\n    const upd = await fedLearning.methods.getVoteUpdate().call(); // Fetches update information from the 'flockie' contract\n\n    console.log(\"Vote to Update? : \", upd);\n    if (upd) {\n      // If an update is available, set the server hash on the 'fedLearning' contract\n      var data = await fedLearning.methods.setServer(data_agg.data.data.hash).send({\n        from: accounts[0],\n        gas: 3000000\n      });\n      console.log(\"Update model write to SC successfully : \", upd);\n      if (data) {\n        setUpdate(true);\n        setApprove(data);\n      }\n      // await fedLearning.methods.setServer(data_agg.data.data.hash).call().then((data) => {\n      //   setUpdate(true)\n      //   setApprove(data)  // Updates the 'update' state and approves the data from the 'fedLearning' contract\n      // })\n    }\n  };\n\n  // const reset = () => {\n  //   setx('')\n  //   setfirst('')\n  // }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [!train && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"glass\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: e => handleSubmit(e),\n        className: \"glass__form\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Train Clients\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"glass__form__group\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"Client_count\",\n            className: \"glass__form__input\",\n            placeholder: \"Number of Clients\",\n            required: true,\n            autoFocus: true,\n            min: \"2\",\n            pattern: \"[0-9]{0,1}\",\n            title: \"Client count\",\n            type: \"number\",\n            value: x,\n            onChange: e => setx(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"committee_count\",\n            className: \"glass__form__input\",\n            placeholder: \"Number of Committee Members\",\n            required: true,\n            min: \"1\",\n            pattern: \"[0-9]{0,1}\",\n            title: \"Committee count\",\n            type: \"number\",\n            value: committee,\n            onChange: e => setcommittee(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"threshold_count\",\n            className: \"glass__form__input\",\n            placeholder: \"Initial Threshold Iteration to Begin Trust Model\",\n            required: true,\n            min: \"1\",\n            pattern: \"[0-9]{0,1}\",\n            title: \"Threshold count\",\n            type: \"number\",\n            value: threshold,\n            onChange: e => setthreshold(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"glass__form__group\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"glass__form__btn\",\n            children: \"Train Clients and Upload Gradients\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }, this), train && !server && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"glass\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: e => handleAggregate(e),\n        className: \"glass__form\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Aggregate Clients\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"glass__form__group\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"glass__form__btn\",\n            children: \"Approve\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 9\n    }, this), train && server && approve && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"glass\",\n      children: /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Congratulations, your model has been approved!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 9\n    }, this), train && server && !approve && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"glass\",\n      children: /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Please improve your model and try again!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_s(Glass, \"pDIc9euAp8I86zgMTOKH35Sll9Y=\");\n_c = Glass;\nexport default Glass;\nvar _c;\n$RefreshReg$(_c, \"Glass\");","map":{"version":3,"names":["useState","axios","parse","abi_fedLearning","contractAddress_fedLearning","abi_flockie","contractAddress_flockie","FLK_wolf","FLK_elephant","FLK_tiger","Web3","UploadPage","Glass","x","setx","committee","setcommittee","threshold","setthreshold","train","setTrain","approve","setApprove","server","setServer","update","setUpdate","web3","fedLearning","eth","Contract","handleSubmit","e","preventDefault","accounts","account_addr","getAccounts","element","push","user_input_value","initial_score_and_serverhash","post","console","log","data","server_hash","trust_score","methods","send","from","gas","i","setScore","gass","s_hash","getServer","call","then","getScore","score","params","trust_score_and_serverhash","handleAggregate","payload","getWeights","data_agg","accuracy","hash","vote","upd","getVoteUpdate","target","value"],"sources":["C:/Users/saimo/OneDrive/Desktop/Fed-Block-Final/src/components/Glass.js"],"sourcesContent":["import './Glass.css'\r\nimport { useState } from 'react'\r\nimport axios from 'axios'\r\nimport parse from \"html-react-parser\";\r\nimport { abi_fedLearning, contractAddress_fedLearning, abi_flockie, contractAddress_flockie, FLK_wolf, FLK_elephant, FLK_tiger } from './sc_config'\r\nimport Web3 from 'web3'\r\nimport UploadPage from './UploadPage'\r\n\r\nfunction Glass() {\r\n  const [x, setx] = useState(9)\r\n  const [committee, setcommittee] = useState(3)\r\n  const [threshold, setthreshold] = useState(10)\r\n  const [train, setTrain] = useState(false)\r\n  const [approve, setApprove] = useState(false)\r\n  const [server, setServer] = useState(false)\r\n  const [update, setUpdate] = useState(false)\r\n\r\n  const web3 = new Web3(\"http://localhost:7545\")\r\n  const fedLearning = new web3.eth.Contract(abi_fedLearning, contractAddress_fedLearning)\r\n  //const flockie = new web3.eth.Contract(abi_flockie, contractAddress_flockie)\r\n\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault()      // Prevents the default form submission behavior to handle data via code.\r\n    var accounts = []         // Initializes an empty array 'accounts' to store Ethereum accounts.\r\n    const account_addr = await web3.eth.getAccounts()           // Retrieves Ethereum accounts available through Web3.\r\n    // console.log(\"All Ethemereum Accounts: \")\r\n    // console.log(account_addr)             // Logs the array of Ethereum accounts to the console.\r\n    for (var element in account_addr) {       // Loops through the 'account_addr' array and adds each account to the 'accounts' array.\r\n      accounts.push(account_addr[element])\r\n    }\r\n    const user_input_value = {\r\n      \"client\": x,\r\n      \"committee\": committee,\r\n      \"threshold\": threshold\r\n    }\r\n    const initial_score_and_serverhash = await axios.post('http://localhost:8080/initialize', user_input_value)\r\n    console.log(initial_score_and_serverhash.data.server_hash)\r\n    console.log(initial_score_and_serverhash.data.trust_score)\r\n    await fedLearning.methods.setServer(initial_score_and_serverhash.data.server_hash).send({ from: accounts[0], gas: 3000000 })\r\n    for (let i = 1; i <=x; i++) {\r\n      fedLearning.methods.setScore(accounts[i], initial_score_and_serverhash.data.trust_score[i-1]).send({ from: accounts[i], gass: 3000000 })\r\n    }\r\n    let s_hash\r\n    await fedLearning.methods.getServer().call().then((server) => {\r\n      s_hash = server\r\n    });\r\n    const trust_score = []\r\n    for (let i = 1; i <=x; i++) {\r\n      await fedLearning.methods.getScore(accounts[i]).call().then((score) => {\r\n        trust_score.push(score)\r\n      });\r\n    }\r\n    const params = {\r\n      \"hash\": s_hash,\r\n      \"trust_score\": trust_score\r\n    }\r\n    const trust_score_and_serverhash = await axios.post('http://localhost:8080/trust_model', user_input_value, params)\r\n\r\n    // const params = { x }    // Creates an object with no. of client which is x\r\n    // const params = {\r\n    //   \"s_hash\": s_hash,\r\n    //   \"x\": x\r\n    // }    // Creates an object with no. of client which is x and s_hash\r\n\r\n    // const data = await axios.post('http://localhost:8080/train', params)    // Sends a POST request to 'http://localhost:8080/train' endpoint with the 'params' object.   Receives the response data returned from the server.\r\n\r\n    // console.log(\"Accounts List: \", accounts[1])      // Logs the second account from the 'accounts' array to the console.\r\n    // for (let i = 1; i <= x; i++) {\r\n    //   fedLearning.methods.sendWeights(accounts[i], data.data.data[`client${i - 1}`]).send({ from: accounts[i], gas: 3000000 }); // Calls the 'sendWeights' method of the 'fedLearning' contract to send client0's data to the second Ethereum account.  // The 'from' parameter specifies the sender's account and 'gas' is the gas limit for the transaction.\r\n    // }\r\n    // // fedLearning.methods.sendWeights(accounts[1], data.data.data.client0).send({from:accounts[0], gas: 3000000}); // Calls the 'sendWeights' method of the 'fedLearning' contract to send client0's data to the second Ethereum account.  // The 'from' parameter specifies the sender's account and 'gas' is the gas limit for the transaction.\r\n    // // fedLearning.methods.sendWeights(accounts[2], data.data.data.client1).send({from:accounts[0], gas: 3000000}); // Similarly, sends client1's data to the third Ethereum account.\r\n    // // fedLearning.methods.sendWeights(accounts[3], data.data.data.client2).send({from:accounts[0], gas: 3000000}); // Sends client2's data to the fourth Ethereum account.\r\n    setTrain(true)   // Updates the state variable 'train' to true, indicating that the training process is completed.\r\n  }\r\n\r\n  const handleAggregate = async (e) => {\r\n    e.preventDefault()      // Prevents the default form submission behavior to handle data via code.\r\n\r\n    const accounts = []\r\n    const account_addr = await web3.eth.getAccounts()\r\n    for (const element in account_addr) {\r\n      accounts.push(account_addr[element])\r\n    }   // Retrieves Ethereum accounts using Web3 and stores them in the 'accounts' array.\r\n\r\n    const payload = []   // Initializes an empty array 'payload' to store data.\r\n\r\n    for (let i = 1; i <= x; i++) {\r\n      await fedLearning.methods.getWeights(accounts[i]).call().then((data) => {\r\n        // console.log(data)\r\n        payload.push(data)\r\n      });   // Retrieves weights for account 1 from the 'fedLearning' contract and adds it to the 'payload' array.  \r\n      console.log(\"Get data from address \", accounts[i])\r\n      console.log(\"data: \", payload[i - 1])\r\n    }\r\n    console.log(\"payload[] : \", payload)\r\n\r\n    const data_agg = await axios.post('http://localhost:8080/aggregate', payload)    // Posts the 'payload' data to 'http://localhost:8080/aggregate' and gets the aggregated data.\r\n\r\n    setServer(true)   // Sets the 'server' state to true, indicating the server has received aggregated data\r\n    console.log(\"HELLLLOOOOOOO\")\r\n    console.log(\"Accuracy: \", data_agg.data.data.accuracy)\r\n    console.log(\"Hash: \", data_agg.data.data.hash)\r\n    // Votes on the accuracy of the aggregated data for the respective accounts using the 'flockie' contract\r\n\r\n    for (let i = 1; i <= x; i++) {\r\n      await fedLearning.methods.vote(accounts[i], data_agg.data.data.accuracy[i - 1]).send({ from: accounts[i], gas: 3000000 });\r\n    }\r\n\r\n    const upd = await fedLearning.methods.getVoteUpdate().call()  // Fetches update information from the 'flockie' contract\r\n\r\n    console.log(\"Vote to Update? : \", upd)\r\n\r\n    if (upd) {\r\n      // If an update is available, set the server hash on the 'fedLearning' contract\r\n      var data = await fedLearning.methods.setServer(data_agg.data.data.hash).send({ from: accounts[0], gas: 3000000 })\r\n      console.log(\"Update model write to SC successfully : \", upd)\r\n      if (data) {\r\n        setUpdate(true)\r\n        setApprove(data)\r\n      }\r\n      // await fedLearning.methods.setServer(data_agg.data.data.hash).call().then((data) => {\r\n      //   setUpdate(true)\r\n      //   setApprove(data)  // Updates the 'update' state and approves the data from the 'fedLearning' contract\r\n      // })\r\n    }\r\n  }\r\n\r\n  // const reset = () => {\r\n  //   setx('')\r\n  //   setfirst('')\r\n  // }\r\n\r\n\r\n  return (\r\n    <>\r\n      {!train &&\r\n        <div className=\"glass\">\r\n          <form onSubmit={(e) => handleSubmit(e)} className=\"glass__form\">\r\n            <h4>Train Clients</h4>\r\n            <div className=\"glass__form__group\">\r\n              <input\r\n                id=\"Client_count\"\r\n                className=\"glass__form__input\"\r\n                placeholder=\"Number of Clients\"\r\n                required\r\n                autoFocus\r\n                min=\"2\"\r\n                pattern=\"[0-9]{0,1}\"\r\n                title=\"Client count\"\r\n                type=\"number\"\r\n                value={x}\r\n                onChange={(e) => setx(e.target.value)}\r\n              />\r\n              <input\r\n                id=\"committee_count\"\r\n                className=\"glass__form__input\"\r\n                placeholder=\"Number of Committee Members\"\r\n                required\r\n                min=\"1\"\r\n                pattern=\"[0-9]{0,1}\"\r\n                title=\"Committee count\"\r\n                type=\"number\"\r\n                value={committee}\r\n                onChange={(e) => setcommittee(e.target.value)}\r\n              />\r\n              <input\r\n                id=\"threshold_count\"\r\n                className=\"glass__form__input\"\r\n                placeholder=\"Initial Threshold Iteration to Begin Trust Model\"\r\n                required\r\n                min=\"1\"\r\n                pattern=\"[0-9]{0,1}\"\r\n                title=\"Threshold count\"\r\n                type=\"number\"\r\n                value={threshold}\r\n                onChange={(e) => setthreshold(e.target.value)}\r\n              />\r\n            </div>\r\n            <div className=\"glass__form__group\">\r\n              <button type=\"submit\" className=\"glass__form__btn\">\r\n                Train Clients and Upload Gradients\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>}\r\n\r\n      {train && !server &&\r\n        <div className=\"glass\">\r\n          <form onSubmit={(e) => handleAggregate(e)} className=\"glass__form\">\r\n            <h4>Aggregate Clients</h4>\r\n            <div className=\"glass__form__group\">\r\n              <button type=\"submit\" className=\"glass__form__btn\">\r\n                Approve\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>}\r\n\r\n      {train && server && approve &&\r\n        <div className=\"glass\">\r\n          <h4>Congratulations, your model has been approved!</h4>\r\n        </div>}\r\n\r\n\r\n\r\n      {train && server && !approve &&\r\n        <div className=\"glass\">\r\n          <h4>Please improve your model and try again!</h4>\r\n        </div>}\r\n\r\n      {/* {train && server && approve && update &&\r\n        <div className=\"glass\">\r\n          <form onSubmit={(e) => handleAggregate(e)} className=\"glass__form\">\r\n            <h4>Update your model</h4>\r\n            <div className=\"glass__form__group\">\r\n              <button type=\"submit\" className=\"glass__form__btn\">\r\n                Approve\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      } */}\r\n\r\n    </>)\r\n}\r\n\r\nexport default Glass"],"mappings":";;AAAA,OAAO,aAAa;AACpB,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,mBAAmB;AACrC,SAASC,eAAe,EAAEC,2BAA2B,EAAEC,WAAW,EAAEC,uBAAuB,EAAEC,QAAQ,EAAEC,YAAY,EAAEC,SAAS,QAAQ,aAAa;AACnJ,OAAOC,IAAI,MAAM,MAAM;AACvB,OAAOC,UAAU,MAAM,cAAc;AAAA;AAAA;AAErC,SAASC,KAAK,GAAG;EAAA;EACf,MAAM,CAACC,CAAC,EAAEC,IAAI,CAAC,GAAGd,QAAQ,CAAC,CAAC,CAAC;EAC7B,MAAM,CAACe,SAAS,EAAEC,YAAY,CAAC,GAAGhB,QAAQ,CAAC,CAAC,CAAC;EAC7C,MAAM,CAACiB,SAAS,EAAEC,YAAY,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACmB,KAAK,EAAEC,QAAQ,CAAC,GAAGpB,QAAQ,CAAC,KAAK,CAAC;EACzC,MAAM,CAACqB,OAAO,EAAEC,UAAU,CAAC,GAAGtB,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACuB,MAAM,EAAEC,SAAS,CAAC,GAAGxB,QAAQ,CAAC,KAAK,CAAC;EAC3C,MAAM,CAACyB,MAAM,EAAEC,SAAS,CAAC,GAAG1B,QAAQ,CAAC,KAAK,CAAC;EAE3C,MAAM2B,IAAI,GAAG,IAAIjB,IAAI,CAAC,uBAAuB,CAAC;EAC9C,MAAMkB,WAAW,GAAG,IAAID,IAAI,CAACE,GAAG,CAACC,QAAQ,CAAC3B,eAAe,EAAEC,2BAA2B,CAAC;EACvF;;EAGA,MAAM2B,YAAY,GAAG,MAAOC,CAAC,IAAK;IAChCA,CAAC,CAACC,cAAc,EAAE,EAAM;IACxB,IAAIC,QAAQ,GAAG,EAAE,EAAS;IAC1B,MAAMC,YAAY,GAAG,MAAMR,IAAI,CAACE,GAAG,CAACO,WAAW,EAAE,EAAW;IAC5D;IACA;IACA,KAAK,IAAIC,OAAO,IAAIF,YAAY,EAAE;MAAQ;MACxCD,QAAQ,CAACI,IAAI,CAACH,YAAY,CAACE,OAAO,CAAC,CAAC;IACtC;IACA,MAAME,gBAAgB,GAAG;MACvB,QAAQ,EAAE1B,CAAC;MACX,WAAW,EAAEE,SAAS;MACtB,WAAW,EAAEE;IACf,CAAC;IACD,MAAMuB,4BAA4B,GAAG,MAAMvC,KAAK,CAACwC,IAAI,CAAC,kCAAkC,EAAEF,gBAAgB,CAAC;IAC3GG,OAAO,CAACC,GAAG,CAACH,4BAA4B,CAACI,IAAI,CAACC,WAAW,CAAC;IAC1DH,OAAO,CAACC,GAAG,CAACH,4BAA4B,CAACI,IAAI,CAACE,WAAW,CAAC;IAC1D,MAAMlB,WAAW,CAACmB,OAAO,CAACvB,SAAS,CAACgB,4BAA4B,CAACI,IAAI,CAACC,WAAW,CAAC,CAACG,IAAI,CAAC;MAAEC,IAAI,EAAEf,QAAQ,CAAC,CAAC,CAAC;MAAEgB,GAAG,EAAE;IAAQ,CAAC,CAAC;IAC5H,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAGtC,CAAC,EAAEsC,CAAC,EAAE,EAAE;MAC1BvB,WAAW,CAACmB,OAAO,CAACK,QAAQ,CAAClB,QAAQ,CAACiB,CAAC,CAAC,EAAEX,4BAA4B,CAACI,IAAI,CAACE,WAAW,CAACK,CAAC,GAAC,CAAC,CAAC,CAAC,CAACH,IAAI,CAAC;QAAEC,IAAI,EAAEf,QAAQ,CAACiB,CAAC,CAAC;QAAEE,IAAI,EAAE;MAAQ,CAAC,CAAC;IAC1I;IACA,IAAIC,MAAM;IACV,MAAM1B,WAAW,CAACmB,OAAO,CAACQ,SAAS,EAAE,CAACC,IAAI,EAAE,CAACC,IAAI,CAAElC,MAAM,IAAK;MAC5D+B,MAAM,GAAG/B,MAAM;IACjB,CAAC,CAAC;IACF,MAAMuB,WAAW,GAAG,EAAE;IACtB,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAGtC,CAAC,EAAEsC,CAAC,EAAE,EAAE;MAC1B,MAAMvB,WAAW,CAACmB,OAAO,CAACW,QAAQ,CAACxB,QAAQ,CAACiB,CAAC,CAAC,CAAC,CAACK,IAAI,EAAE,CAACC,IAAI,CAAEE,KAAK,IAAK;QACrEb,WAAW,CAACR,IAAI,CAACqB,KAAK,CAAC;MACzB,CAAC,CAAC;IACJ;IACA,MAAMC,MAAM,GAAG;MACb,MAAM,EAAEN,MAAM;MACd,aAAa,EAAER;IACjB,CAAC;IACD,MAAMe,0BAA0B,GAAG,MAAM5D,KAAK,CAACwC,IAAI,CAAC,mCAAmC,EAAEF,gBAAgB,EAAEqB,MAAM,CAAC;;IAElH;IACA;IACA;IACA;IACA;;IAEA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACAxC,QAAQ,CAAC,IAAI,CAAC,EAAG;EACnB,CAAC;;EAED,MAAM0C,eAAe,GAAG,MAAO9B,CAAC,IAAK;IACnCA,CAAC,CAACC,cAAc,EAAE,EAAM;;IAExB,MAAMC,QAAQ,GAAG,EAAE;IACnB,MAAMC,YAAY,GAAG,MAAMR,IAAI,CAACE,GAAG,CAACO,WAAW,EAAE;IACjD,KAAK,MAAMC,OAAO,IAAIF,YAAY,EAAE;MAClCD,QAAQ,CAACI,IAAI,CAACH,YAAY,CAACE,OAAO,CAAC,CAAC;IACtC,CAAC,CAAG;;IAEJ,MAAM0B,OAAO,GAAG,EAAE,EAAG;;IAErB,KAAK,IAAIZ,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAItC,CAAC,EAAEsC,CAAC,EAAE,EAAE;MAC3B,MAAMvB,WAAW,CAACmB,OAAO,CAACiB,UAAU,CAAC9B,QAAQ,CAACiB,CAAC,CAAC,CAAC,CAACK,IAAI,EAAE,CAACC,IAAI,CAAEb,IAAI,IAAK;QACtE;QACAmB,OAAO,CAACzB,IAAI,CAACM,IAAI,CAAC;MACpB,CAAC,CAAC,CAAC,CAAG;MACNF,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAET,QAAQ,CAACiB,CAAC,CAAC,CAAC;MAClDT,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEoB,OAAO,CAACZ,CAAC,GAAG,CAAC,CAAC,CAAC;IACvC;IACAT,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEoB,OAAO,CAAC;IAEpC,MAAME,QAAQ,GAAG,MAAMhE,KAAK,CAACwC,IAAI,CAAC,iCAAiC,EAAEsB,OAAO,CAAC,EAAI;;IAEjFvC,SAAS,CAAC,IAAI,CAAC,EAAG;IAClBkB,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;IAC5BD,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEsB,QAAQ,CAACrB,IAAI,CAACA,IAAI,CAACsB,QAAQ,CAAC;IACtDxB,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEsB,QAAQ,CAACrB,IAAI,CAACA,IAAI,CAACuB,IAAI,CAAC;IAC9C;;IAEA,KAAK,IAAIhB,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAItC,CAAC,EAAEsC,CAAC,EAAE,EAAE;MAC3B,MAAMvB,WAAW,CAACmB,OAAO,CAACqB,IAAI,CAAClC,QAAQ,CAACiB,CAAC,CAAC,EAAEc,QAAQ,CAACrB,IAAI,CAACA,IAAI,CAACsB,QAAQ,CAACf,CAAC,GAAG,CAAC,CAAC,CAAC,CAACH,IAAI,CAAC;QAAEC,IAAI,EAAEf,QAAQ,CAACiB,CAAC,CAAC;QAAED,GAAG,EAAE;MAAQ,CAAC,CAAC;IAC3H;IAEA,MAAMmB,GAAG,GAAG,MAAMzC,WAAW,CAACmB,OAAO,CAACuB,aAAa,EAAE,CAACd,IAAI,EAAE,EAAE;;IAE9Dd,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAE0B,GAAG,CAAC;IAEtC,IAAIA,GAAG,EAAE;MACP;MACA,IAAIzB,IAAI,GAAG,MAAMhB,WAAW,CAACmB,OAAO,CAACvB,SAAS,CAACyC,QAAQ,CAACrB,IAAI,CAACA,IAAI,CAACuB,IAAI,CAAC,CAACnB,IAAI,CAAC;QAAEC,IAAI,EAAEf,QAAQ,CAAC,CAAC,CAAC;QAAEgB,GAAG,EAAE;MAAQ,CAAC,CAAC;MACjHR,OAAO,CAACC,GAAG,CAAC,0CAA0C,EAAE0B,GAAG,CAAC;MAC5D,IAAIzB,IAAI,EAAE;QACRlB,SAAS,CAAC,IAAI,CAAC;QACfJ,UAAU,CAACsB,IAAI,CAAC;MAClB;MACA;MACA;MACA;MACA;IACF;EACF,CAAC;;EAED;EACA;EACA;EACA;;EAGA,oBACE;IAAA,WACG,CAACzB,KAAK,iBACL;MAAK,SAAS,EAAC,OAAO;MAAA,uBACpB;QAAM,QAAQ,EAAGa,CAAC,IAAKD,YAAY,CAACC,CAAC,CAAE;QAAC,SAAS,EAAC,aAAa;QAAA,wBAC7D;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAAsB,eACtB;UAAK,SAAS,EAAC,oBAAoB;UAAA,wBACjC;YACE,EAAE,EAAC,cAAc;YACjB,SAAS,EAAC,oBAAoB;YAC9B,WAAW,EAAC,mBAAmB;YAC/B,QAAQ;YACR,SAAS;YACT,GAAG,EAAC,GAAG;YACP,OAAO,EAAC,YAAY;YACpB,KAAK,EAAC,cAAc;YACpB,IAAI,EAAC,QAAQ;YACb,KAAK,EAAEnB,CAAE;YACT,QAAQ,EAAGmB,CAAC,IAAKlB,IAAI,CAACkB,CAAC,CAACuC,MAAM,CAACC,KAAK;UAAE;YAAA;YAAA;YAAA;UAAA,QACtC,eACF;YACE,EAAE,EAAC,iBAAiB;YACpB,SAAS,EAAC,oBAAoB;YAC9B,WAAW,EAAC,6BAA6B;YACzC,QAAQ;YACR,GAAG,EAAC,GAAG;YACP,OAAO,EAAC,YAAY;YACpB,KAAK,EAAC,iBAAiB;YACvB,IAAI,EAAC,QAAQ;YACb,KAAK,EAAEzD,SAAU;YACjB,QAAQ,EAAGiB,CAAC,IAAKhB,YAAY,CAACgB,CAAC,CAACuC,MAAM,CAACC,KAAK;UAAE;YAAA;YAAA;YAAA;UAAA,QAC9C,eACF;YACE,EAAE,EAAC,iBAAiB;YACpB,SAAS,EAAC,oBAAoB;YAC9B,WAAW,EAAC,kDAAkD;YAC9D,QAAQ;YACR,GAAG,EAAC,GAAG;YACP,OAAO,EAAC,YAAY;YACpB,KAAK,EAAC,iBAAiB;YACvB,IAAI,EAAC,QAAQ;YACb,KAAK,EAAEvD,SAAU;YACjB,QAAQ,EAAGe,CAAC,IAAKd,YAAY,CAACc,CAAC,CAACuC,MAAM,CAACC,KAAK;UAAE;YAAA;YAAA;YAAA;UAAA,QAC9C;QAAA;UAAA;UAAA;UAAA;QAAA,QACE,eACN;UAAK,SAAS,EAAC,oBAAoB;UAAA,uBACjC;YAAQ,IAAI,EAAC,QAAQ;YAAC,SAAS,EAAC,kBAAkB;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAEzC;UAAA;UAAA;UAAA;QAAA,QACL;MAAA;QAAA;QAAA;QAAA;MAAA;IACD;MAAA;MAAA;MAAA;IAAA,QACH,EAEPrD,KAAK,IAAI,CAACI,MAAM,iBACf;MAAK,SAAS,EAAC,OAAO;MAAA,uBACpB;QAAM,QAAQ,EAAGS,CAAC,IAAK8B,eAAe,CAAC9B,CAAC,CAAE;QAAC,SAAS,EAAC,aAAa;QAAA,wBAChE;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAA0B,eAC1B;UAAK,SAAS,EAAC,oBAAoB;UAAA,uBACjC;YAAQ,IAAI,EAAC,QAAQ;YAAC,SAAS,EAAC,kBAAkB;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAEzC;UAAA;UAAA;UAAA;QAAA,QACL;MAAA;QAAA;QAAA;QAAA;MAAA;IACD;MAAA;MAAA;MAAA;IAAA,QACH,EAEPb,KAAK,IAAII,MAAM,IAAIF,OAAO,iBACzB;MAAK,SAAS,EAAC,OAAO;MAAA,uBACpB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAuD;MAAA;MAAA;MAAA;IAAA,QACnD,EAIPF,KAAK,IAAII,MAAM,IAAI,CAACF,OAAO,iBAC1B;MAAK,SAAS,EAAC,OAAO;MAAA,uBACpB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAiD;MAAA;MAAA;MAAA;IAAA,QAC7C;EAAA,gBAeP;AACP;AAAC,GA1NQT,KAAK;AAAA,KAALA,KAAK;AA4Nd,eAAeA,KAAK;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}