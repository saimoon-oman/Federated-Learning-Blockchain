{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\saimo\\\\OneDrive\\\\Desktop\\\\Final Thesis\\\\Fed-Block-Final\\\\src\\\\components\\\\Glass.js\",\n  _s = $RefreshSig$();\nimport './Glass.css';\nimport { useState } from 'react';\nimport axios from 'axios';\nimport parse from \"html-react-parser\";\nimport { abi_fedLearning, contractAddress_fedLearning, abi_flockie, contractAddress_flockie, FLK_wolf, FLK_elephant, FLK_tiger } from './sc_config';\nimport Web3 from 'web3';\nimport UploadPage from './UploadPage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Glass() {\n  _s();\n  const [x, setx] = useState(9);\n  const [committee, setcommittee] = useState(3);\n  const [threshold, setthreshold] = useState(5);\n  const [dataset, setdataset] = useState('');\n  const [method, setmethod] = useState('');\n  const [train, setTrain] = useState(false);\n  const [approve, setApprove] = useState(false);\n  const [server, setServer] = useState(false);\n  const [update, setUpdate] = useState(false);\n  const web3 = new Web3(\"http://localhost:7545\");\n  const fedLearning = new web3.eth.Contract(abi_fedLearning, contractAddress_fedLearning);\n  const handleSubmit = async e => {\n    e.preventDefault(); // Prevents the default form submission behavior to handle data via code.\n    var accounts = []; // Initializes an empty array 'accounts' to store Ethereum accounts.\n    const account_addr = await web3.eth.getAccounts(); // Retrieves Ethereum accounts available through Web3.\n    // console.log(\"All Ethemereum Accounts: \")\n    // console.log(account_addr)             // Logs the array of Ethereum accounts to the console.\n    for (var element in account_addr) {\n      // Loops through the 'account_addr' array and adds each account to the 'accounts' array.\n      accounts.push(account_addr[element]);\n    }\n    const user_input_value = {\n      \"client\": parseInt(x),\n      \"committee\": parseInt(committee),\n      \"threshold\": parseInt(threshold)\n    };\n    const initial_score_and_serverhash = await axios.post('http://localhost:8080/initialize', user_input_value);\n    // console.log(\"Here\")\n    await fedLearning.methods.setServer(initial_score_and_serverhash.data.server_hash).send({\n      from: accounts[0],\n      gas: 3000000\n    });\n    for (let i = 1; i <= x; i++) {\n      fedLearning.methods.setScore(accounts[i], initial_score_and_serverhash.data.trust_score[i - 1]).send({\n        from: accounts[i],\n        gas: 3000000\n      });\n    }\n    let startTime = new Date().getTime(); // Get current time in milliseconds\n\n    let no_of_iteration = 3;\n    for (let it = 1; it <= no_of_iteration; it++) {\n      let s_hash;\n      await fedLearning.methods.getServer().call().then(server => {\n        s_hash = server;\n      });\n      const trust_score = [];\n      for (let i = 1; i <= x; i++) {\n        await fedLearning.methods.getScore(accounts[i]).call().then(score => {\n          trust_score.push(score);\n        });\n      }\n      const params = {\n        \"client\": parseInt(x),\n        \"committee\": parseInt(committee),\n        \"threshold\": parseInt(threshold),\n        \"hash\": s_hash,\n        \"trust_score\": trust_score\n      };\n      const trust_score_and_serverhash = await axios.post('http://localhost:8080/trust_model', params);\n      console.log(\"For iteration \", it, \": \");\n      console.log(\"Trust score : \", trust_score_and_serverhash.data.trust_score);\n      // console.log(\"After trust model call\")\n      s_hash = trust_score_and_serverhash.data.server_hash;\n      await fedLearning.methods.setServer(s_hash).send({\n        from: accounts[0],\n        gas: 3000000\n      });\n      // console.log(\"After getting server\")\n      for (let i = 1; i <= x; i++) {\n        fedLearning.methods.setScore(accounts[i], trust_score_and_serverhash.data.trust_score[i - 1]).send({\n          from: accounts[i],\n          gas: 3000000\n        });\n        // console.log(\"After setting score\")\n      }\n\n      const validation_input = {\n        \"server_hash\": s_hash\n      };\n      // console.log(\"Before Validation\")\n      const model_performance = await axios.post('http://localhost:8080/model_validation', validation_input);\n      console.log(\"Accuracy: \", model_performance.data.accuracy);\n      console.log(\"Precision: \", model_performance.data.precision);\n      console.log(\"Recall: \", model_performance.data.recall);\n      console.log(\"F1-score: \", model_performance.data.f1);\n      let endTime = new Date().getTime();\n      let elapsedTime = endTime - startTime; // Calculate elapsed time in milliseconds\n      console.log(\"Training time:\", elapsedTime / 1000, \"seconds\");\n    }\n    let endTime = new Date().getTime();\n    let elapsedTime = endTime - startTime; // Calculate elapsed time in milliseconds\n    console.log(\"Training time:\", elapsedTime / 1000, \"seconds\"); // Convert milliseconds to seconds for readability\n\n    setTrain(true); // Updates the state variable 'train' to true, indicating that the training process is completed.\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [!train && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"glass\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: e => handleSubmit(e),\n        className: \"glass__form\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Train Clients\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"glass__form__group\",\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            children: \"Number of Clients\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"Client_count\",\n            className: \"glass__form__input\",\n            placeholder: \"Number of Clients\",\n            required: true,\n            autoFocus: true,\n            min: \"2\",\n            pattern: \"[0-9]{0,1}\",\n            title: \"Client count\",\n            type: \"number\",\n            value: x,\n            onChange: e => setx(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n            children: \"Number of Committee Members\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"committee_count\",\n            className: \"glass__form__input\",\n            placeholder: \"Number of Committee Members\",\n            required: true,\n            min: \"1\",\n            pattern: \"[0-9]{0,1}\",\n            title: \"Committee count\",\n            type: \"number\",\n            value: committee,\n            onChange: e => setcommittee(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n            children: \"Initial Threshold Iteration to Begin Trust Model\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"threshold_count\",\n            className: \"glass__form__input\",\n            placeholder: \"Initial Threshold Iteration to Begin Trust Model\",\n            required: true,\n            min: \"1\",\n            pattern: \"[0-9]{0,1}\",\n            title: \"Threshold count\",\n            type: \"number\",\n            value: threshold,\n            onChange: e => setthreshold(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"threshold_count\",\n            className: \"glass__form__input\",\n            placeholder: \"Dataset\",\n            required: true,\n            title: \"Dataset\",\n            type: \"text\",\n            value: dataset,\n            onChange: e => setthreshold(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"threshold_count\",\n            className: \"glass__form__input\",\n            placeholder: \"Method\",\n            required: true,\n            title: \"Method\",\n            type: \"text\",\n            value: method,\n            onChange: e => setthreshold(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"glass__form__group\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"glass__form__btn\",\n            children: \"Train Clients and Upload Gradients\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }, this), train && !server && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"glass\",\n      children: /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Process Completed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_s(Glass, \"MkJnjGcZEFl1Nmwur0V0uGwbouc=\");\n_c = Glass;\nexport default Glass;\nvar _c;\n$RefreshReg$(_c, \"Glass\");","map":{"version":3,"names":["useState","axios","parse","abi_fedLearning","contractAddress_fedLearning","abi_flockie","contractAddress_flockie","FLK_wolf","FLK_elephant","FLK_tiger","Web3","UploadPage","Glass","x","setx","committee","setcommittee","threshold","setthreshold","dataset","setdataset","method","setmethod","train","setTrain","approve","setApprove","server","setServer","update","setUpdate","web3","fedLearning","eth","Contract","handleSubmit","e","preventDefault","accounts","account_addr","getAccounts","element","push","user_input_value","parseInt","initial_score_and_serverhash","post","methods","data","server_hash","send","from","gas","i","setScore","trust_score","startTime","Date","getTime","no_of_iteration","it","s_hash","getServer","call","then","getScore","score","params","trust_score_and_serverhash","console","log","validation_input","model_performance","accuracy","precision","recall","f1","endTime","elapsedTime","target","value"],"sources":["C:/Users/saimo/OneDrive/Desktop/Final Thesis/Fed-Block-Final/src/components/Glass.js"],"sourcesContent":["import './Glass.css'\r\nimport { useState } from 'react'\r\nimport axios from 'axios'\r\nimport parse from \"html-react-parser\";\r\nimport { abi_fedLearning, contractAddress_fedLearning, abi_flockie, contractAddress_flockie, FLK_wolf, FLK_elephant, FLK_tiger } from './sc_config'\r\nimport Web3 from 'web3'\r\nimport UploadPage from './UploadPage'\r\n\r\nfunction Glass() {\r\n  const [x, setx] = useState(9)\r\n  const [committee, setcommittee] = useState(3)\r\n  const [threshold, setthreshold] = useState(5)\r\n  const [dataset, setdataset] = useState('')\r\n  const [method, setmethod] = useState('')\r\n  const [train, setTrain] = useState(false)\r\n  const [approve, setApprove] = useState(false)\r\n  const [server, setServer] = useState(false)\r\n  const [update, setUpdate] = useState(false)\r\n\r\n  const web3 = new Web3(\"http://localhost:7545\")\r\n  const fedLearning = new web3.eth.Contract(abi_fedLearning, contractAddress_fedLearning)\r\n\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault()      // Prevents the default form submission behavior to handle data via code.\r\n    var accounts = []         // Initializes an empty array 'accounts' to store Ethereum accounts.\r\n    const account_addr = await web3.eth.getAccounts()           // Retrieves Ethereum accounts available through Web3.\r\n    // console.log(\"All Ethemereum Accounts: \")\r\n    // console.log(account_addr)             // Logs the array of Ethereum accounts to the console.\r\n    for (var element in account_addr) {       // Loops through the 'account_addr' array and adds each account to the 'accounts' array.\r\n      accounts.push(account_addr[element])\r\n    }\r\n    const user_input_value = {\r\n      \"client\": parseInt(x),\r\n      \"committee\": parseInt(committee),\r\n      \"threshold\": parseInt(threshold)\r\n    }\r\n    const initial_score_and_serverhash = await axios.post('http://localhost:8080/initialize', user_input_value)\r\n    // console.log(\"Here\")\r\n    await fedLearning.methods.setServer(initial_score_and_serverhash.data.server_hash).send({ from: accounts[0], gas: 3000000 })\r\n    for (let i = 1; i <= x; i++) {\r\n      fedLearning.methods.setScore(accounts[i], initial_score_and_serverhash.data.trust_score[i - 1]).send({ from: accounts[i], gas: 3000000 })\r\n    }\r\n\r\n    let startTime = new Date().getTime(); // Get current time in milliseconds\r\n\r\n    let no_of_iteration = 3\r\n\r\n    for (let it = 1; it <= no_of_iteration; it++) {\r\n      let s_hash\r\n      await fedLearning.methods.getServer().call().then((server) => {\r\n        s_hash = server\r\n      });\r\n      const trust_score = []\r\n      for (let i = 1; i <= x; i++) {\r\n        await fedLearning.methods.getScore(accounts[i]).call().then((score) => {\r\n          trust_score.push(score)\r\n        });\r\n      }\r\n      const params = {\r\n        \"client\": parseInt(x),\r\n        \"committee\": parseInt(committee),\r\n        \"threshold\": parseInt(threshold),\r\n        \"hash\": s_hash,\r\n        \"trust_score\": trust_score\r\n      }\r\n      const trust_score_and_serverhash = await axios.post('http://localhost:8080/trust_model', params)\r\n      console.log(\"For iteration \", it, \": \")\r\n      console.log(\"Trust score : \", trust_score_and_serverhash.data.trust_score)\r\n      // console.log(\"After trust model call\")\r\n      s_hash = trust_score_and_serverhash.data.server_hash\r\n      await fedLearning.methods.setServer(s_hash).send({ from: accounts[0], gas: 3000000 })\r\n      // console.log(\"After getting server\")\r\n      for (let i = 1; i <= x; i++) {\r\n        fedLearning.methods.setScore(accounts[i], trust_score_and_serverhash.data.trust_score[i - 1]).send({ from: accounts[i], gas: 3000000 })\r\n        // console.log(\"After setting score\")\r\n      }\r\n      const validation_input = {\r\n        \"server_hash\": s_hash\r\n      }\r\n      // console.log(\"Before Validation\")\r\n      const model_performance = await axios.post('http://localhost:8080/model_validation', validation_input)\r\n\r\n      console.log(\"Accuracy: \", model_performance.data.accuracy)\r\n      console.log(\"Precision: \", model_performance.data.precision)\r\n      console.log(\"Recall: \", model_performance.data.recall)\r\n      console.log(\"F1-score: \", model_performance.data.f1)\r\n      let endTime = new Date().getTime();\r\n      let elapsedTime = endTime - startTime; // Calculate elapsed time in milliseconds\r\n      console.log(\"Training time:\", elapsedTime / 1000, \"seconds\");\r\n    }\r\n\r\n    let endTime = new Date().getTime();\r\n    let elapsedTime = endTime - startTime; // Calculate elapsed time in milliseconds\r\n    console.log(\"Training time:\", elapsedTime / 1000, \"seconds\"); // Convert milliseconds to seconds for readability\r\n\r\n    setTrain(true)   // Updates the state variable 'train' to true, indicating that the training process is completed.\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      {!train &&\r\n        <div className=\"glass\">\r\n          <form onSubmit={(e) => handleSubmit(e)} className=\"glass__form\">\r\n            <h4>Train Clients</h4>\r\n            <div className=\"glass__form__group\">\r\n              <h5>Number of Clients</h5>\r\n              <input\r\n                id=\"Client_count\"\r\n                className=\"glass__form__input\"\r\n                placeholder=\"Number of Clients\"\r\n                required\r\n                autoFocus\r\n                min=\"2\"\r\n                pattern=\"[0-9]{0,1}\"\r\n                title=\"Client count\"\r\n                type=\"number\"\r\n                value={x}\r\n                onChange={(e) => setx(e.target.value)}\r\n              />\r\n              <h5>Number of Committee Members</h5>\r\n              <input\r\n                id=\"committee_count\"\r\n                className=\"glass__form__input\"\r\n                placeholder=\"Number of Committee Members\"\r\n                required\r\n                min=\"1\"\r\n                pattern=\"[0-9]{0,1}\"\r\n                title=\"Committee count\"\r\n                type=\"number\"\r\n                value={committee}\r\n                onChange={(e) => setcommittee(e.target.value)}\r\n              />\r\n              <h5>Initial Threshold Iteration to Begin Trust Model</h5>\r\n              <input\r\n                id=\"threshold_count\"\r\n                className=\"glass__form__input\"\r\n                placeholder=\"Initial Threshold Iteration to Begin Trust Model\"\r\n                required\r\n                min=\"1\"\r\n                pattern=\"[0-9]{0,1}\"\r\n                title=\"Threshold count\"\r\n                type=\"number\"\r\n                value={threshold}\r\n                onChange={(e) => setthreshold(e.target.value)}\r\n              />\r\n              <input\r\n                id=\"threshold_count\"\r\n                className=\"glass__form__input\"\r\n                placeholder=\"Dataset\"\r\n                required\r\n                title=\"Dataset\"\r\n                type=\"text\"\r\n                value={dataset}\r\n                onChange={(e) => setthreshold(e.target.value)}\r\n              />\r\n              <input\r\n                id=\"threshold_count\"\r\n                className=\"glass__form__input\"\r\n                placeholder=\"Method\"\r\n                required\r\n                title=\"Method\"\r\n                type=\"text\"\r\n                value={method}\r\n                onChange={(e) => setthreshold(e.target.value)}\r\n              />\r\n              \r\n            </div>\r\n            <div className=\"glass__form__group\">\r\n              <button type=\"submit\" className=\"glass__form__btn\">\r\n                Train Clients and Upload Gradients\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>}\r\n\r\n      {train && !server &&\r\n        <div className=\"glass\">\r\n          <h4>Process Completed</h4>\r\n        </div>}\r\n\r\n    </>)\r\n}\r\n\r\nexport default Glass"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}